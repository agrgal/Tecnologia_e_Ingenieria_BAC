Sigp = Fp / S0
units(Sigp) = with(ud_units, N/m^2)
Ep = Lp / L0
# Limite elástico
Fe = set_units(3.2,kN)
Le = set_units(0.22,mm)
Sige = Fe / S0
units(Sige) = with(ud_units, N/m^2)
Ee = Le / L0
# Resistencia a la tracción
FR = set_units(16,kN)
LR = set_units(4,mm)
SigR = FR / S0
units(SigR) = with(ud_units, N/m^2)
ER = LR / L0
# Resistencia a la rotura
FU = set_units(14,kN)
LU = set_units(4.5,mm)
SigU = FU / S0
units(SigU) = with(ud_units, N/m^2)
EU = LU / L0
# representando
epsilon = c(Ep,Ee,ER,EU)
sigma = c(Sigp,Sige,SigR,SigU)
plot(epsilon,sigma
,pch=22,col="blue"
,main="Ensayo de tracción - Ejercicio 1"
,xlim=c(0,0.05), ylim=c(0,2.1e+8))
segments(0,1,Ep,Sigp,col="red")
segments(Ee,Sige,Ep,Sigp,col="red")
segments(Ee,Sige,ER,SigR,col="red")
segments(EU,SigU,ER,SigR,col="red")
# Módulo de young
E = Sigp / Ep
cat("El módulo de Young es E = ", as.character(E),as_cf(E))
units(E) = with(ud_units,GPa)
cat("El módulo de Young es E = ", as.character(E),as_cf(E))
# texto
sigma2=sigma
units(sigma)= with(ud_units,MPa) #lo pongo en Mega Pascales
etiquetas = paste0(
"(",
round(epsilon,4),
" , ",
round(sigma,2),
as_cf(sigma),
")")
posiciones=c(1,3,2,1)
text(epsilon,sigma2,etiquetas,col="blue",pos=posiciones,cex=0.8)
text(0.03,sigma2[1],paste0("El módulo de Young es E = ", as.character(round(E,2)),as_cf(E)),col="black")
# Trabajo bajo la curva
W1=Fp*Lp/2
W2=Fp*(Le-Lp)
W3=(Fe-Fp)*(Le-Lp)/2
W4=Fe*(LR-Le)
W5=(FR-Fe)*(LR-Le)/2
W6=FU*(LU-LR)
W7=(FR-FU)*(LU-LR)/2
W=W1+W2+W3+W4+W5+W6+W7
units(W)=with(ud_units,J)
cat("El trabajo realizado es W=",as.character(W),as_cf(W))
text(0.03,sigma2[1]/2,paste0("El trabajo realizado es W=",as.character(W),as_cf(W)),col="black")
# Barra cuadrada
# instalar el paquete udunits, antes apt-get install libudunits2-dev
library(units)
# Lado y L0
a = set_units(1,cm)
L0 = set_units(10,cm)
# Superficie
S0=a^2 # Ya que es cuadrado
# Fuerza de Tracción
F = set_units(8,kN)
# Módulo de Young
E=set_units(2,MN/cm^2)
# Límite de proporcionalidad
SigP =set_units(100,MPa)
# --- Resolución ----
Sigma = F / S0
epsilon = Sigma / E
cat("Sigma =",as.character(Sigma),as_cf(Sigma))
units(Sigma)=with(ud_units,MPa)
cat("Sigma =",as.character(Sigma),as_cf(Sigma))
cat("Claramente es menor que el límite proporcional ",as.character(SigP),as_cf(SigP))
cat(paste0("Y epsilon=",epsilon))
source('~/Escritorio/TINII/Materiales_tema_1/RSTUDIO/Ejercicio3.R')
# Barra cuadrada
# instalar el paquete udunits, antes apt-get install libudunits2-dev
library(units)
# Lado y L0
a = set_units(1,cm)
L0 = set_units(10,cm)
# Superficie
S0=a^2 # Ya que es cuadrado
# Fuerza de Tracción
F = set_units(8,kN)
# Módulo de Young
E=set_units(2,MN/cm^2)
# Límite de proporcionalidad
SigP =set_units(100,MPa)
# --- Resolución ----
Sigma = F / S0
epsilon = Sigma / E
cat("Sigma =",as.character(Sigma),as_cf(Sigma))
units(Sigma)=with(ud_units,MPa)
cat("Sigma =",as.character(Sigma),as_cf(Sigma))
cat("Claramente es menor que el límite proporcional ",as.character(SigP),as_cf(SigP))
cat(paste0("Y epsilon=",epsilon))
cat(paste0("Y epsilon(%)=",epsilon*100,"%"))
# Carga de 80 kN
F = set_units(80,kN)
source('~/Escritorio/TINII/Materiales_tema_1/RSTUDIO/Ejercicio3.R')
# Barra cuadrada
# instalar el paquete udunits, antes apt-get install libudunits2-dev
library(units)
# Lado y L0
a = set_units(1,cm)
L0 = set_units(10,cm)
# Superficie
S0=a^2 # Ya que es cuadrado
# Fuerza de Tracción
F = set_units(8,kN)
# Módulo de Young
E=set_units(2,MN/cm^2)
# Límite de proporcionalidad
SigP =set_units(100,MPa)
# --- Resolución ----
Sigma = F / S0
epsilon = Sigma / E
cat("Sigma =",as.character(Sigma),as_cf(Sigma))
units(Sigma)=with(ud_units,MPa)
cat("Sigma =",as.character(Sigma),as_cf(Sigma))
cat("Claramente es menor que el límite proporcional ",as.character(SigP),as_cf(SigP))
cat(paste0("Y epsilon=",epsilon))
cat(paste0("Y epsilon(%)=",epsilon*100,"%"))
cat(paste0("deltaL=",epsilon*L0)
# Carga de 80 kN
F = set_units(80,kN)
source('~/Escritorio/TINII/Materiales_tema_1/RSTUDIO/Ejercicio3.R')
# Barra cuadrada
# instalar el paquete udunits, antes apt-get install libudunits2-dev
library(units)
# Lado y L0
a = set_units(1,cm)
L0 = set_units(10,cm)
# Superficie
S0=a^2 # Ya que es cuadrado
# Fuerza de Tracción
F = set_units(8,kN)
# Módulo de Young
E=set_units(2,MN/cm^2)
# Límite de proporcionalidad
SigP =set_units(100,MPa)
# --- Resolución ----
Sigma = F / S0
epsilon = Sigma / E
cat("Sigma =",as.character(Sigma),as_cf(Sigma))
units(Sigma)=with(ud_units,MPa)
cat("Sigma =",as.character(Sigma),as_cf(Sigma))
cat("Claramente es menor que el límite proporcional ",as.character(SigP),as_cf(SigP))
cat(paste0("Y epsilon=",epsilon))
cat(paste0("Y epsilon(%)=",epsilon*100,"%"))
cat(paste0("deltaL=",epsilon*L0))
# Carga de 80 kN
F = set_units(80,kN)
source('~/Escritorio/TINII/Materiales_tema_1/RSTUDIO/Ejercicio3.R')
source('~/Escritorio/TINII/Materiales_tema_1/RSTUDIO/Ejercicio3.R')
# Barra cuadrada
# instalar el paquete udunits, antes apt-get install libudunits2-dev
library(units)
# Lado y L0
a = set_units(1,cm)
L0 = set_units(10,cm)
# Superficie
S0=a^2 # Ya que es cuadrado
# Fuerza de Tracción
F = set_units(8,kN)
# Módulo de Young
E=set_units(2,MN/cm^2)
# Límite de proporcionalidad
SigP =set_units(100,MPa)
# --- Resolución ----
Sigma = F / S0
epsilon = Sigma / E
cat("Sigma =",as.character(Sigma),as_cf(Sigma))
units(Sigma)=with(ud_units,MPa)
cat("Sigma =",as.character(Sigma),as_cf(Sigma))
cat("Claramente es menor que el límite proporcional ",as.character(SigP),as_cf(SigP))
cat(paste0("Y epsilon=",epsilon))
cat(paste0("Y epsilon(%)=",epsilon*100,"%"))
deltaL=epsilon*L0
cat(paste0("deltaL=",as.character(deltaL),as_cf(deltaL)))
# Carga de 80 kN
F = set_units(80,kN)
source('~/Escritorio/TINII/Materiales_tema_1/RSTUDIO/Ejercicio3.R')
# Barra cuadrada
# instalar el paquete udunits, antes apt-get install libudunits2-dev
library(units)
# Lado y L0
a = set_units(1,cm)
L0 = set_units(10,cm)
# Superficie
S0=a^2 # Ya que es cuadrado
# Fuerza de Tracción
F = set_units(8,kN)
# Módulo de Young
E=set_units(2,MN/cm^2)
# Límite de proporcionalidad
SigP =set_units(100,MPa)
# --- Resolución ----
Sigma = F / S0
epsilon = Sigma / E
cat("Sigma =",as.character(Sigma),as_cf(Sigma))
units(Sigma)=with(ud_units,MPa)
cat("Sigma =",as.character(Sigma),as_cf(Sigma))
cat("Claramente es menor que el límite proporcional ",as.character(SigP),as_cf(SigP))
cat(paste0("Y epsilon=",epsilon))
cat(paste0("Y epsilon(%)=",epsilon*100,"%"))
deltaL=epsilon*L0
cat(paste0("deltaL=",as.character(deltaL),as_cf(deltaL)))
# Carga de 80 kN
F = set_units(80,kN)
Sigma = F /S0
Sigma
source('~/Escritorio/TINII/Materiales_tema_1/RSTUDIO/Ejercicio3.R')
# Barra cuadrada
# instalar el paquete udunits, antes apt-get install libudunits2-dev
library(units)
# Lado y L0
a = set_units(1,cm)
L0 = set_units(10,cm)
# Superficie
S0=a^2 # Ya que es cuadrado
# Fuerza de Tracción
F = set_units(8,kN)
# Módulo de Young
E=set_units(2,MN/cm^2)
# Límite de proporcionalidad
SigP =set_units(100,MPa)
# --- Resolución ----
Sigma = F / S0
epsilon = Sigma / E
cat("Sigma =",as.character(Sigma),as_cf(Sigma))
units(Sigma)=with(ud_units,MPa)
cat("Sigma =",as.character(Sigma),as_cf(Sigma))
cat("Claramente es menor que el límite proporcional ",as.character(SigP),as_cf(SigP))
cat(paste0("Y epsilon=",epsilon))
cat(paste0("Y epsilon(%)=",epsilon*100,"%"))
deltaL=epsilon*L0
cat(paste0("deltaL=",as.character(deltaL),as_cf(deltaL)))
# Carga de 80 kN
F2 = set_units(80,kN)
Sigma2 = F2 /S0
Sigma2
source('~/Escritorio/TINII/Materiales_tema_1/RSTUDIO/Ejercicio3.R')
# Barra cuadrada
# instalar el paquete udunits, antes apt-get install libudunits2-dev
library(units)
# Lado y L0
a = set_units(1,cm)
L0 = set_units(10,cm)
# Superficie
S0=a^2 # Ya que es cuadrado
# Fuerza de Tracción
F = set_units(8,kN)
# Módulo de Young
E=set_units(2,MN/cm^2)
# Límite de proporcionalidad
SigP =set_units(100,MPa)
# --- Resolución ----
Sigma = F / S0
epsilon = Sigma / E
cat("Sigma =",as.character(Sigma),as_cf(Sigma))
units(Sigma)=with(ud_units,MPa)
cat("Sigma =",as.character(Sigma),as_cf(Sigma))
cat("Claramente es menor que el límite proporcional ",as.character(SigP),as_cf(SigP))
cat(paste0("Y epsilon=",epsilon))
cat(paste0("Y epsilon(%)=",epsilon*100,"%"))
deltaL=epsilon*L0
cat(paste0("deltaL=",as.character(deltaL),as_cf(deltaL)))
# Carga de 80 kN
F2 = set_units(80,kN)
Sigma2 = F2 /S0
Sigma2
units(Sigma2)=with(ud_units,MPa) # cambiar a Mega Pascales
Sigma2
source('~/Escritorio/TINII/Materiales_tema_1/RSTUDIO/Ejercicio3.R')
# Barra cuadrada
# instalar el paquete udunits, antes apt-get install libudunits2-dev
library(units)
# Lado y L0
a = set_units(1,cm)
L0 = set_units(10,cm)
# Superficie
S0=a^2 # Ya que es cuadrado
# Fuerza de Tracción
F = set_units(8,kN)
# Módulo de Young
E=set_units(2,MN/cm^2)
# Límite de proporcionalidad
SigP =set_units(100,MPa)
# --- Resolución ----
Sigma = F / S0
epsilon = Sigma / E
cat("Sigma =",as.character(Sigma),as_cf(Sigma))
units(Sigma)=with(ud_units,MPa)
cat("Sigma =",as.character(Sigma),as_cf(Sigma))
cat("Claramente es menor que el límite proporcional ",as.character(SigP),as_cf(SigP))
cat(paste0("Y epsilon=",epsilon))
cat(paste0("Y epsilon(%)=",epsilon*100,"%"))
deltaL=epsilon*L0
cat(paste0("deltaL=",as.character(deltaL),as_cf(deltaL)))
# Carga de 80 kN
F2 = set_units(80,kN)
Sigma2 = F2 /S0
Sigma2
units(Sigma2)=with(ud_units,MPa) # cambiar a Mega Pascales
Sigma2
cat("Sigma2 es mayor que el límite proporcional, luego puedo decir que")
cat("epsilon > Sigma / E")
source('~/Escritorio/TINII/Materiales_tema_1/RSTUDIO/Ejercicio3.R')
# Barra cuadrada
# instalar el paquete udunits, antes apt-get install libudunits2-dev
library(units)
# Lado y L0
a = set_units(1,cm)
L0 = set_units(10,cm)
# Superficie
S0=a^2 # Ya que es cuadrado
# Fuerza de Tracción
F = set_units(8,kN)
# Módulo de Young
E=set_units(2,MN/cm^2)
# Límite de proporcionalidad
SigP =set_units(100,MPa)
# --- Resolución ----
Sigma = F / S0
epsilon = Sigma / E
cat("Sigma =",as.character(Sigma),as_cf(Sigma))
units(Sigma)=with(ud_units,MPa)
cat("Sigma =",as.character(Sigma),as_cf(Sigma))
cat("Claramente es menor que el límite proporcional ",as.character(SigP),as_cf(SigP))
cat(paste0("Y epsilon=",epsilon))
cat(paste0("Y epsilon(%)=",epsilon*100,"%"))
deltaL=epsilon*L0
cat(paste0("deltaL=",as.character(deltaL),as_cf(deltaL)))
# Carga de 80 kN
F2 = set_units(80,kN)
Sigma2 = F2 /S0
Sigma2
units(Sigma2)=with(ud_units,MPa) # cambiar a Mega Pascales
Sigma2
cat("$\Sigma$ es mayor que el límite proporcional, luego puedo decir que")
cat("epsilon > Sigma / E")
knitr::opts_chunk$set(echo = FALSE)
library(units)
# Lado y L0
a = set_units(1,cm)
L0 = set_units(10,cm)
# Superficie
S0=a^2 # Ya que es cuadrado
# Fuerza de Tracción
F = set_units(8,kN)
# Módulo de Young
E=set_units(2,MN/cm^2)
# Límite de proporcionalidad
SigP =set_units(100,MPa)
# Tenemos los siguientes datos:
# Diámetro de la probeta 10mm
# Longitud de la probeta 100mm
# instalar el paquete udunits, antes apt-get install libudunits2-dev
library(units)
# diámetro
D = set_units(10,mm)
# units(D) = with(ud_units,m) #convierte la unidad a metros
S0=pi*((D/2)^2) # calculo de la superficie S0
# Longitud
L0 = set_units(100,mm)
units(L0) = with(ud_units,m) #convierte la unidad a metros
# Limite proporcional
Fp = set_units(3,kN)
Lp = set_units(0.2,mm)
Sigp = Fp / S0
units(Sigp) = with(ud_units, N/m^2)
Ep = Lp / L0
# Limite elástico
Fe = set_units(3.2,kN)
Le = set_units(0.22,mm)
Sige = Fe / S0
units(Sige) = with(ud_units, N/m^2)
Ee = Le / L0
# Resistencia a la tracción
FR = set_units(16,kN)
LR = set_units(4,mm)
SigR = FR / S0
units(SigR) = with(ud_units, N/m^2)
ER = LR / L0
# Resistencia a la rotura
FU = set_units(14,kN)
LU = set_units(4.5,mm)
SigU = FU / S0
units(SigU) = with(ud_units, N/m^2)
EU = LU / L0
# representando
epsilon = c(Ep,Ee,ER,EU)
sigma = c(Sigp,Sige,SigR,SigU)
plot(epsilon,sigma
,pch=22,col="blue"
,main="Ensayo de tracción - Ejercicio 1"
,xlim=c(0,0.05), ylim=c(0,2.1e+8))
segments(0,1,Ep,Sigp,col="red")
segments(Ee,Sige,Ep,Sigp,col="red")
segments(Ee,Sige,ER,SigR,col="red")
segments(EU,SigU,ER,SigR,col="red")
# Módulo de young
E = Sigp / Ep
cat("El módulo de Young es E = ", as.character(E),as_cf(E))
units(E) = with(ud_units,GPa)
cat("El módulo de Young es E = ", as.character(E),as_cf(E))
# texto
sigma2=sigma
units(sigma)= with(ud_units,MPa) #lo pongo en Mega Pascales
etiquetas = paste0(
"(",
round(epsilon,4),
" , ",
round(sigma,2),
as_cf(sigma),
")")
posiciones=c(1,3,2,1)
text(epsilon,sigma2,etiquetas,col="blue",pos=posiciones,cex=0.8)
text(0.03,sigma2[1],paste0("El módulo de Young es E = ", as.character(round(E,2)),as_cf(E)),col="black")
# Trabajo bajo la curva
W1=Fp*Lp/2
W2=Fp*(Le-Lp)
W3=(Fe-Fp)*(Le-Lp)/2
W4=Fe*(LR-Le)
W5=(FR-Fe)*(LR-Le)/2
W6=FU*(LU-LR)
W7=(FR-FU)*(LU-LR)/2
W=W1+W2+W3+W4+W5+W6+W7
units(W)=with(ud_units,J)
cat("El trabajo realizado es W=",as.character(W),as_cf(W))
install.packages("rmarkdown")
library("rmarkdown", lib.loc="~/R/i686-pc-linux-gnu-library/3.3")
library("units)
Ee=(Le-L0)/L0
Ee
)
)))
library("units")
ud_units
ud_units("Kp")
ud_units()
ud_units()
a=ud_units
a
grep("kp",a)
grep("k",a)
a=units()
a=units.ud()
a=units.ud
a=units_ud
a=units_ud()
a=ud_units()
library(units)
a=ud_units()
a=ud_units
grep("k",a)
grep("kg",a)
head(a,5)
match('K',a)
match('K',a[[1]])
match('K',a[1])
a[[1]]
al=a[1]
al
al=a[[1]]
al
b=unlist(a)
b
'k' %in% b
'K' %in% b
'k' %in% b
'kg' %in% b
b
head(b,22)
b=as.character(b)
b
rm(b)
rm(al)
str(a)
D
val(D)
value(D)
units(D)
plot(ee,esfuerzos,col="darkblue",pch=22,bg="darkcyan",type="b",
main="Diagrama de esfuerzos - deformación",
axes=FALSE)
axis(1,at=1:length(ee),labels=1:length(ee),las=1)
library("units")
library("knitr")
esfuerzos=c(0,500,1000,2000,3000,4000,4500,5000,4000,3750)
units(esfuerzos)=with(ud_units,kgf/cm^2)
longitudes=c(150,150.01,150.02,150.03,150.04,150.05,150.06,151.28,151.87,153.28)
units(longitudes)=with(ud_units,mm)
L0=set_units(150,mm)
ee=(longitudes-L0)/L0 # Calculo las longitudes
plot(ee,esfuerzos,col="darkblue",pch=22,bg="darkcyan",type="b",
main="Diagrama de esfuerzos - deformación",
axes=FALSE)
axis(1,at=1:length(ee),labels=1:length(ee),las=1)
ee
